{"ast":null,"code":"import axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'http://localhost:8077',\n  // Match your backend port\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add an interceptor to include auth token if available\ninstance.interceptors.request.use(config => {\n  const storedUser = localStorage.getItem('user');\n  if (storedUser) {\n    const user = JSON.parse(storedUser);\n    if (user.token) {\n      config.headers.Authorization = `Bearer ${user.token}`;\n    }\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","headers","interceptors","request","use","config","storedUser","localStorage","getItem","user","JSON","parse","token","Authorization","error","Promise","reject"],"sources":["C:/Y3S1/Bus_Management/frontend/src/api/axios.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'http://localhost:8077', // Match your backend port\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add an interceptor to include auth token if available\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      const user = JSON.parse(storedUser);\r\n      if (user.token) {\r\n        config.headers.Authorization = `Bearer ${user.token}`;\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nexport default instance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC/C,IAAIF,UAAU,EAAE;IACd,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;IACnC,IAAIG,IAAI,CAACG,KAAK,EAAE;MACdP,MAAM,CAACJ,OAAO,CAACY,aAAa,GAAG,UAAUJ,IAAI,CAACG,KAAK,EAAE;IACvD;EACF;EACA,OAAOP,MAAM;AACf,CAAC,EACAS,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAED,eAAehB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}