{"ast":null,"code":"import axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'http://localhost:8077',\n  // Verify this is the correct backend URL\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add response interceptor for better error debugging\ninstance.interceptors.response.use(response => response, error => {\n  var _error$config, _error$config2, _error$response, _error$response2;\n  console.log('API Error:', {\n    message: error.message,\n    endpoint: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n  });\n  return Promise.reject(error);\n});\n\n// Add an interceptor to include auth token if available\ninstance.interceptors.request.use(config => {\n  const storedUser = localStorage.getItem('user');\n  if (storedUser) {\n    const user = JSON.parse(storedUser);\n    if (user.token) {\n      config.headers.Authorization = `Bearer ${user.token}`;\n    }\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","headers","interceptors","response","use","error","_error$config","_error$config2","_error$response","_error$response2","console","log","message","endpoint","config","url","method","status","data","Promise","reject","request","storedUser","localStorage","getItem","user","JSON","parse","token","Authorization"],"sources":["C:/Y3S1/Bus_Management/frontend/src/api/axios.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'http://localhost:8077',  // Verify this is the correct backend URL\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add response interceptor for better error debugging\r\ninstance.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.log('API Error:', {\r\n      message: error.message,\r\n      endpoint: error.config?.url,\r\n      method: error.config?.method,\r\n      status: error.response?.status,\r\n      data: error.response?.data\r\n    });\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add an interceptor to include auth token if available\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      const user = JSON.parse(storedUser);\r\n      if (user.token) {\r\n        config.headers.Authorization = `Bearer ${user.token}`;\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nexport default instance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE,uBAAuB;EAAG;EACnCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,QAAQ,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC/BD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EAAA,IAAAC,aAAA,EAAAC,cAAA,EAAAC,eAAA,EAAAC,gBAAA;EACTC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE;IACxBC,OAAO,EAAEP,KAAK,CAACO,OAAO;IACtBC,QAAQ,GAAAP,aAAA,GAAED,KAAK,CAACS,MAAM,cAAAR,aAAA,uBAAZA,aAAA,CAAcS,GAAG;IAC3BC,MAAM,GAAAT,cAAA,GAAEF,KAAK,CAACS,MAAM,cAAAP,cAAA,uBAAZA,cAAA,CAAcS,MAAM;IAC5BC,MAAM,GAAAT,eAAA,GAAEH,KAAK,CAACF,QAAQ,cAAAK,eAAA,uBAAdA,eAAA,CAAgBS,MAAM;IAC9BC,IAAI,GAAAT,gBAAA,GAAEJ,KAAK,CAACF,QAAQ,cAAAM,gBAAA,uBAAdA,gBAAA,CAAgBS;EACxB,CAAC,CAAC;EACF,OAAOC,OAAO,CAACC,MAAM,CAACf,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAP,QAAQ,CAACI,YAAY,CAACmB,OAAO,CAACjB,GAAG,CAC9BU,MAAM,IAAK;EACV,MAAMQ,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC/C,IAAIF,UAAU,EAAE;IACd,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;IACnC,IAAIG,IAAI,CAACG,KAAK,EAAE;MACdd,MAAM,CAACb,OAAO,CAAC4B,aAAa,GAAG,UAAUJ,IAAI,CAACG,KAAK,EAAE;IACvD;EACF;EACA,OAAOd,MAAM;AACf,CAAC,EACAT,KAAK,IAAKc,OAAO,CAACC,MAAM,CAACf,KAAK,CACjC,CAAC;AAED,eAAeP,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}